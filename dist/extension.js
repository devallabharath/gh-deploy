(()=>{"use strict";var e={112:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.deactivate=t.activate=void 0;const s=o(r(147)),n=r(593),a=r(496),i={defaultFromBranch:"main",defaultToBranch:"website",defaultFolder:"build",defaultCommitMessage:"update",defaultPreTask:"skip"};t.activate=function(e){const t=async(e,t,r,o=!1)=>await a.window.showQuickPick(e,{title:t,placeHolder:r,canPickMany:o}),r=async(e,t,r,o=!1)=>await a.window.showInputBox({title:e,placeHolder:t,prompt:r,password:o}),o=async e=>{if(e.includes("main"))return"main";const r=e.filter((e=>"main"===e||"master"===e));if(r.length>0)return r[0];return await t(e,"GH-Pages: From Branch (1/6)",'Pick a "from" branch')||"User cancelled"},c=async(e,r,o)=>{let s;s=o.includes(r)?[`Default: ${r}`,...o.filter((t=>t!==e&&t!==r))]:[...o.filter((t=>t!==e))];const n=await t(s,"GH-Pages: To Branch (2/6)",'Select an option for "To" branch');return n?n===`Default: ${r}`?r:n:"User cancelled"},l=async(e,o)=>{const n=async e=>await t(e,"GH-Pages: Deploy Folder (3/6)",'Select an option for deploy "Folder"')||"User cancelled",a=async()=>await r("GH-Pages: Deploy Folder (3/6)","Eg: build or dist","Folder Name")||"User cancelled";let i,c=["build","release","dist","out"].filter((t=>s.default.existsSync(`${e}/${t}`)));return c=c.filter((e=>e!==o)),s.default.existsSync(`${e}/${o}`)?(i=await n([o,...c,"Other"]),"Other"===i?a():i):0===c.length?a():(i=await n([...c,"Other"]),"Other"===i?a():i)},h=async e=>{const t=await r("GH-Pages: Commit Message (4/6)","Ex: version v0.5, Hotfix-#21","Enter Commit message");return t?""===t||" "===t?e:t:"User cancelled"},u=async e=>{const o=await t("skip"===e?["Default: Skip","Other"]:[`Default: '${e}'`,"Other","Skip"],"GH-Pages: Pre Deploy Task (5/6)",'Select an option for preDeploy "Task"');if(!o)return"User cancelled";if("Skip"===o||"Default: Skip"===o)return"echo";if(o===`Default: '${e}'`)return e;const s=await r("GH-Pages: Pre Deploy Task (5/6)","Enter pre deploy command","pre Deploy task");return s&&""!==s&&" "!==s?s:"User cancelled"},m=async()=>{const e=await r("GH-Pages: Authentication (6/6)",'Enter "deploy" to deploy...','Enter "deploy" to continue');return e?"deploy"===e||"Authentication failed":"User cancelled"},d=a.commands.registerCommand("gh-deploy.deploy",(()=>{(async()=>{const e=["no work folder found","User cancelled","No remotes available"],t=await(()=>{const e=a.workspace.workspaceFolders?.[0].uri.path;return e?(0,n.gitInfo)(e):"no work folder found"})();if("string"==typeof t)return Promise.reject(t);const r=a.workspace.getConfiguration("gh-deploy"),s=e=>{const t=r.get(e);return t&&" "!==t&&""!==t?t:i[e]},d=await o(t.Locals);if(e.includes(d))return Promise.reject(d);const p=await c(d,s("defaultToBranch"),t.Remotes);if(e.includes(p))return Promise.reject(p);const f=await l(t.Root,s("defaultFolder"));if(e.includes(f))return Promise.reject(f);const g=await h(s("defaultCommitMessage"));if(e.includes(g))return Promise.reject(g);const w=await u(s("defaultPreTask"));if(e.includes(w))return Promise.reject(w);const P=await m();return"string"==typeof P?Promise.reject(P):Promise.resolve({git:t,fromBranch:d,toBranch:p,folder:f,commit:g,preTask:w})})().then((({git:e,fromBranch:o,toBranch:s,folder:i,commit:c,preTask:l})=>{Promise.resolve().then((()=>{return o=e.Root,(0,n.shell)(o,"git status --porcelain","Git status").then((async e=>{if(""===e)return Promise.resolve(!0);const s=await t(["Stash them","Exit"],"GH-Pages: Uncommited Files","You have uncommited changes, stash to continue...");return s&&"Exit"!==s?Promise.resolve((async e=>{const t=await r("GH-Pages: Stash files (1/6)","Enter a name to stash..","Stash Name");if(!t||""===t||" "===t)return Promise.reject("User cancelled");const o=await(0,n.shell)(e,`git stash save '${t}'`,"Git Stash");return"Git Stash"===o?Promise.reject(o):Promise.resolve(t)})(o)):Promise.reject("User cancelled")})).catch((e=>Promise.reject(e)));var o})).then((()=>a.window.withProgress({location:a.ProgressLocation.Notification,title:"GH Deploy",cancellable:!1},(async(t,r)=>(async(e,t,r)=>(r.report({increment:0,message:`Switching to '${t}'...`}),(0,n.shell)(e,`git checkout ${t}`,"Git Checkout").then((()=>(r.report({increment:11,message:"Pulling from remote..."}),(0,n.shell)(e,"git pull","Git Pull")))).catch((e=>Promise.reject(e)))))(e.Root,o,t).then((()=>(t.report({increment:22,message:"Running Pre Deploy Task..."}),(0,n.shell)(e.Root,l,"PreDeploy")))).then((()=>(async(e,t,r,o,s)=>(s.report({increment:33,message:"Creating temperary worktree"}),(0,n.shell)(e,`git --work-tree ${t} checkout --orphan ${r}-deploy`,"Git checkout").then((()=>(s.report({increment:44,message:"Adding files to worktree"}),(0,n.shell)(e,`git --work-tree ${t} add --all`,"Staging files")))).then((()=>(s.report({increment:55,message:"Commiting files in worktree"}),(0,n.shell)(e,`git --work-tree ${t} commit -m '${o}'`,"Git commit")))).then((()=>(s.report({increment:66,message:"Pushing to remote branch"}),(0,n.shell)(e,`git push origin HEAD:${r} --force`,"Git push")))).catch((e=>Promise.reject(e)))))(e.Root,i,s,c,t))).then((()=>(async(e,t,r,o)=>(o.report({increment:77,message:"Switching to prev branch"}),(0,n.shell)(e,`git checkout --force ${r}`,"Git Checkout").then((()=>(o.report({increment:88,message:"Cleaning temp worktree"}),(0,n.shell)(e,`git branch -D ${t}-deploy`,"Clean up")))).catch((e=>Promise.reject(e)))))(e.Root,s,e.Current,t))).then((()=>{t.report({increment:100,message:"Successfully Deployed"})})).catch((e=>a.window.showErrorMessage(e))))))).then((()=>a.window.showInformationMessage(`Deployed from ${o} to ${s}`))).catch((e=>a.window.showErrorMessage(e)))})).catch((e=>a.window.showErrorMessage(e)))}));e.subscriptions.push(d)},t.deactivate=function(){}},593:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.gitInfo=t.shell=void 0;const o=r(81),s=(e,t,r)=>new Promise((function(s,n){(0,o.exec)(`cd ${e} && ${t}`,((t,o,a)=>t?(t.toString().replace("Error",r),n(((e,t,r,o)=>`${e}: ${r.toString().split(":")[1]} \n dir: ${t} \n ${o.replace("sh: ","")}`)(r,e,t,a))):s(o.trim())))}));t.shell=s,t.gitInfo=e=>(e=>s(e,"git rev-parse --show-toplevel","Git stats").then((e=>Promise.resolve({Root:e}))).catch((e=>Promise.reject(e))))(e).then((e=>(e=>s(e.Root,"git symbolic-ref HEAD -q","Git current").then((t=>{const r=t.replace(/^refs\/heads\//,"");return Promise.resolve({...e,Current:r})})).catch((e=>Promise.reject(e))))(e))).then((e=>{return s((t=e).Root,"git branch -a | awk -F ' +' '! /(no branch)/ {print $2}'","Git branches").then((e=>{const r=e.split("\n");if(0===r.length)return Promise.reject(new Error("No branches available"));const o=[];for(;r[r.length-1].includes("remotes/origin/");)o.push(r.pop()?.replace("remotes/origin/",""));return 0===o.length?Promise.reject(new Error("No remotes available")):Promise.resolve({...t,Locals:r,Remotes:o})})).catch((e=>Promise.reject(e)));var t})).catch((e=>Promise.reject(e)))},496:e=>{e.exports=require("vscode")},81:e=>{e.exports=require("child_process")},147:e=>{e.exports=require("fs")}},t={},r=function r(o){var s=t[o];if(void 0!==s)return s.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,r),n.exports}(112);module.exports=r})();